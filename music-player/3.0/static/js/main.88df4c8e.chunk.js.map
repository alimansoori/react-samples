{"version":3,"sources":["app/music-player/assets/LostChameleon.mp3","app/music-player/assets/TheHipsta.mp3","app/music-player/assets/Tobu.mp3","app/music-player/MusicPlayerContext.js","app/music-player/hooks/useMusicPlayer.js","app/music-player/components/TrackList.js","app/music-player/components/PlayerControls.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MusicPlayerContext","createContext","MusicPlayerProvider","props","useState","audioPlayer","Audio","tracks","name","file","LostChameleon","TheHipsta","Tobu","currentTrackIndex","isPlaying","state","setState","Provider","value","children","useMusicPlayer","useContext","playTrack","index","togglePlay","pause","play","currentTrackName","trackList","playPreviousTrack","length","playNextTrack","TrackList","map","track","className","onClick","icon","faPause","faPlay","Controls","disabled","faStepBackward","faStepForward","App","PlayerControls","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88df4c8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LostChameleon.45990d78.mp3\";","module.exports = __webpack_public_path__ + \"static/media/TheHipsta.c6ebb25d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Tobu.0559b5bf.mp3\";","import React, {useState, createContext} from 'react';\r\n\r\nimport LostChameleon from './assets/LostChameleon.mp3';\r\nimport TheHipsta from './assets/TheHipsta.mp3';\r\nimport Tobu from './assets/Tobu.mp3';\r\n\r\nconst MusicPlayerContext = createContext([{}, () => {}]);\r\n\r\nconst MusicPlayerProvider = (props) => {\r\n    const [state, setState] = useState({\r\n        audioPlayer: new Audio(),\r\n        tracks: [\r\n            {\r\n                name: \"Lost Chameleon - Genesis\",\r\n                file: LostChameleon\r\n            },\r\n            {\r\n                name: \"The Hipsta - Shaken Soda\",\r\n                file: TheHipsta\r\n            },\r\n            {\r\n                name: \"Tobu - Such Fun\",\r\n                file: Tobu\r\n            }\r\n        ],\r\n        currentTrackIndex: null,\r\n        isPlaying: false\r\n    });\r\n\r\n    return (\r\n        <MusicPlayerContext.Provider value={[state, setState]}>\r\n            {props.children}\r\n        </MusicPlayerContext.Provider>\r\n    );\r\n};\r\n\r\nexport { MusicPlayerContext, MusicPlayerProvider };","import { useContext } from 'react';\r\nimport { MusicPlayerContext } from '../MusicPlayerContext';\r\n\r\nconst useMusicPlayer = () => {\r\n    const [state, setState] = useContext(MusicPlayerContext);\r\n\r\n    // Play a specific track\r\n    function playTrack(index) {\r\n        if (index === state.currentTrackIndex) {\r\n            togglePlay();\r\n        } else {\r\n            state.audioPlayer.pause();\r\n            state.audioPlayer = new Audio(state.tracks[index].file);\r\n            state.audioPlayer.play();\r\n            setState(state => ({\r\n                ...state,\r\n                currentTrackIndex: index,\r\n                isPlaying: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    // Toggle play or pause\r\n    function togglePlay() {\r\n        if (state.isPlaying) {\r\n            state.audioPlayer.pause();\r\n        } else {\r\n            state.audioPlayer.play();\r\n        }\r\n        setState(\r\n            state => ({\r\n                ...state,\r\n                isPlaying: !state.isPlaying\r\n            })\r\n        );\r\n    }\r\n\r\n    // Play the previous track in the track array\r\n    function playPreviousTrack() {\r\n        const newIndex = ((state.currentTrackIndex + -1) % state.tracks.length + state.tracks.length) % state.tracks.length;\r\n        playTrack(newIndex);\r\n    }\r\n\r\n    // Play the next track in the tracks array\r\n    function playNextTrack() {\r\n        const newIndex = (state.currentTrackIndex + 1) % state.tracks.length;\r\n        playTrack(newIndex);\r\n    }\r\n\r\n    return {\r\n        playTrack,\r\n        togglePlay,\r\n        currentTrackName: state.currentTrackIndex !== null && state.tracks[state.currentTrackIndex].name,\r\n        trackList: state.tracks,\r\n        isPlaying: state.isPlaying,\r\n        playPreviousTrack,\r\n        playNextTrack\r\n    }\r\n};\r\n\r\nexport default useMusicPlayer;","import React, { useContext } from 'react';\r\n\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faPlay, faPause} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport useMusicPlayer from '../hooks/useMusicPlayer';\r\n\r\nconst TrackList = () => {\r\n    const { trackList, currentTrackName, playTrack, isPlaying } = useMusicPlayer();\r\n\r\n    return (\r\n        <>\r\n            {trackList.map((track, index) => (\r\n                <div className=\"box\">\r\n                    <button className=\"button\" onClick={() => playTrack(index)}>\r\n                        {currentTrackName === track.name && isPlaying ? <FontAwesomeIcon icon={faPause}/> : <FontAwesomeIcon icon={faPlay}/>}\r\n                    </button>\r\n                    <div className=\"song-title\">\r\n                        {track.name}\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TrackList;","import React from 'react';\r\n\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faPause, faPlay, faStepBackward, faStepForward} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport useMusicPlayer from '../hooks/useMusicPlayer';\r\n\r\nconst Controls = () => {\r\n    const {isPlaying, currentTrackName, togglePlay, playPreviousTrack, playNextTrack} = useMusicPlayer();\r\n\r\n    return (\r\n        <>\r\n            <div className=\"box controls has-background-grey-dark\">\r\n                <div className=\"current-track has-text-light\">\r\n                    <marquee>{currentTrackName}</marquee>\r\n                </div>\r\n                <div>\r\n                    <button className=\"button has-text-light has-background-grey-dark\" onClick={playPreviousTrack} disabled={!currentTrackName}>\r\n                        <FontAwesomeIcon icon={faStepBackward}/>\r\n                    </button>\r\n                    <button className=\"button has-text-light has-background-grey-dark\" onClick={togglePlay} disabled={!currentTrackName}>\r\n                        {isPlaying ? <FontAwesomeIcon icon={faPause}/> : <FontAwesomeIcon icon={faPlay}/>}\r\n                    </button>\r\n                    <button className=\"button has-text-light has-background-grey-dark\" onClick={playNextTrack} disabled={!currentTrackName}>\r\n                        <FontAwesomeIcon icon={faStepForward}/>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Controls;","import React from 'react';\r\n\r\nimport TrackList from './app/music-player/components/TrackList.js';\r\nimport PlayerControls from './app/music-player/components/PlayerControls.js';\r\nimport { MusicPlayerProvider } from './app/music-player/MusicPlayerContext.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <MusicPlayerProvider>\r\n      <div className='container'>\r\n        <TrackList/>\r\n        <PlayerControls/>\r\n      </div>\r\n    </MusicPlayerProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport 'bulma/css/bulma.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}